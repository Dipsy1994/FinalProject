// <auto-generated />
using System;
using FinalProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalProject.Models.Airline", b =>
                {
                    b.Property<int?>("AirlineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AirlineID"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirlineID");

                    b.ToTable("Airline");
                });

            modelBuilder.Entity("FinalProject.Models.Airport", b =>
                {
                    b.Property<int?>("AirportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AirportID"));

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirportID");

                    b.HasIndex("CityID");

                    b.ToTable("Airport");
                });

            modelBuilder.Entity("FinalProject.Models.ArrivalInfo", b =>
                {
                    b.Property<int?>("ArrivalInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ArrivalInfoID"));

                    b.Property<int?>("AirportID")
                        .HasColumnType("int");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ArrivalInfoID");

                    b.HasIndex("AirportID");

                    b.ToTable("ArrivalInfo");
                });

            modelBuilder.Entity("FinalProject.Models.Booking", b =>
                {
                    b.Property<int?>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BookingID"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FlightID")
                        .HasColumnType("int");

                    b.Property<int?>("SeatID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("FlightID");

                    b.HasIndex("SeatID");

                    b.HasIndex("UserID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FinalProject.Models.City", b =>
                {
                    b.Property<int?>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CityID"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FinalProject.Models.DepartureInfo", b =>
                {
                    b.Property<int?>("DepartureInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DepartureInfoID"));

                    b.Property<int?>("AirportID")
                        .HasColumnType("int");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartureInfoID");

                    b.HasIndex("AirportID");

                    b.ToTable("DepartureInfo");
                });

            modelBuilder.Entity("FinalProject.Models.Flight", b =>
                {
                    b.Property<int?>("FlightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FlightID"));

                    b.Property<int?>("AirlineID")
                        .HasColumnType("int");

                    b.Property<int?>("AirportID")
                        .HasColumnType("int");

                    b.Property<int?>("AirportID1")
                        .HasColumnType("int");

                    b.Property<int?>("ArrivalInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartureInfoID")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FlightID");

                    b.HasIndex("AirlineID");

                    b.HasIndex("AirportID");

                    b.HasIndex("AirportID1");

                    b.HasIndex("ArrivalInfoID");

                    b.HasIndex("DepartureInfoID");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("FinalProject.Models.Lounge", b =>
                {
                    b.Property<int?>("LoungeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LoungeID"));

                    b.Property<int?>("AirlineID")
                        .HasColumnType("int");

                    b.Property<int?>("AirportID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoungeID");

                    b.HasIndex("AirlineID");

                    b.HasIndex("AirportID");

                    b.ToTable("Lounge");
                });

            modelBuilder.Entity("FinalProject.Models.Seat", b =>
                {
                    b.Property<int?>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SeatID"));

                    b.Property<bool?>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlightID")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.HasIndex("FlightID");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Property<int?>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pwd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.Models.Airport", b =>
                {
                    b.HasOne("FinalProject.Models.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FinalProject.Models.ArrivalInfo", b =>
                {
                    b.HasOne("FinalProject.Models.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportID");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("FinalProject.Models.Booking", b =>
                {
                    b.HasOne("FinalProject.Models.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightID");

                    b.HasOne("FinalProject.Models.Seat", "Seat")
                        .WithMany("Bookings")
                        .HasForeignKey("SeatID");

                    b.HasOne("FinalProject.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID");

                    b.Navigation("Flight");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.Models.DepartureInfo", b =>
                {
                    b.HasOne("FinalProject.Models.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportID");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("FinalProject.Models.Flight", b =>
                {
                    b.HasOne("FinalProject.Models.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineID");

                    b.HasOne("FinalProject.Models.Airport", null)
                        .WithMany("Arrivals")
                        .HasForeignKey("AirportID");

                    b.HasOne("FinalProject.Models.Airport", null)
                        .WithMany("Departures")
                        .HasForeignKey("AirportID1");

                    b.HasOne("FinalProject.Models.ArrivalInfo", "ArrivalInfo")
                        .WithMany("Flights")
                        .HasForeignKey("ArrivalInfoID");

                    b.HasOne("FinalProject.Models.DepartureInfo", "DepartureInfo")
                        .WithMany("Flights")
                        .HasForeignKey("DepartureInfoID");

                    b.Navigation("Airline");

                    b.Navigation("ArrivalInfo");

                    b.Navigation("DepartureInfo");
                });

            modelBuilder.Entity("FinalProject.Models.Lounge", b =>
                {
                    b.HasOne("FinalProject.Models.Airline", "Airline")
                        .WithMany("Lounges")
                        .HasForeignKey("AirlineID");

                    b.HasOne("FinalProject.Models.Airport", "Airport")
                        .WithMany("Lounges")
                        .HasForeignKey("AirportID");

                    b.Navigation("Airline");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("FinalProject.Models.Seat", b =>
                {
                    b.HasOne("FinalProject.Models.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightID");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.Models.Airline", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Lounges");
                });

            modelBuilder.Entity("FinalProject.Models.Airport", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("Departures");

                    b.Navigation("Lounges");
                });

            modelBuilder.Entity("FinalProject.Models.ArrivalInfo", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FinalProject.Models.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("FinalProject.Models.DepartureInfo", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FinalProject.Models.Flight", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FinalProject.Models.Seat", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
